# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import mapreduce_pb2 as mapreduce__pb2


class DriverStub(object):
    """File: mapreduce.proto
    Description: This file defines a simple message format to solve the word count
    problem with map-reduce.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PingPong = channel.unary_unary(
                '/Driver/PingPong',
                request_serializer=mapreduce__pb2.Ping.SerializeToString,
                response_deserializer=mapreduce__pb2.Pong.FromString,
                )
        self.AssignTask = channel.unary_unary(
                '/Driver/AssignTask',
                request_serializer=mapreduce__pb2.TaskRequest.SerializeToString,
                response_deserializer=mapreduce__pb2.TaskAssignment.FromString,
                )
        self.AcknowledgeTaskCompletion = channel.unary_unary(
                '/Driver/AcknowledgeTaskCompletion',
                request_serializer=mapreduce__pb2.TaskCompletion.SerializeToString,
                response_deserializer=mapreduce__pb2.TaskCompletionACK.FromString,
                )


class DriverServicer(object):
    """File: mapreduce.proto
    Description: This file defines a simple message format to solve the word count
    problem with map-reduce.

    """

    def PingPong(self, request, context):
        """Pings the Driver just to know if its reachable.
        Input: Ping (random number)
        Output: Pong (received number incremented and echoed back)
        Example usage: request = { ping: 1 } => response = { pong: 2 }
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssignTask(self, request, context):
        """Requests the Driver a new task.
        Input: TaskRequest (does not contain relevant information in this implementation
        but could potentially include information about the client like number of cores
        or current load so the Driver assigns the most suitable task)
        Output: TaskAssignment (the task assignment)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AcknowledgeTaskCompletion(self, request, context):
        """Notifies the completion of a task so the Driver can mark it as complete.
        Input: TaskCompletion (task completion notification from a worker)
        Output: TaskCompletionACK (acknowledgement of task completion notification)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DriverServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PingPong': grpc.unary_unary_rpc_method_handler(
                    servicer.PingPong,
                    request_deserializer=mapreduce__pb2.Ping.FromString,
                    response_serializer=mapreduce__pb2.Pong.SerializeToString,
            ),
            'AssignTask': grpc.unary_unary_rpc_method_handler(
                    servicer.AssignTask,
                    request_deserializer=mapreduce__pb2.TaskRequest.FromString,
                    response_serializer=mapreduce__pb2.TaskAssignment.SerializeToString,
            ),
            'AcknowledgeTaskCompletion': grpc.unary_unary_rpc_method_handler(
                    servicer.AcknowledgeTaskCompletion,
                    request_deserializer=mapreduce__pb2.TaskCompletion.FromString,
                    response_serializer=mapreduce__pb2.TaskCompletionACK.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Driver', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Driver(object):
    """File: mapreduce.proto
    Description: This file defines a simple message format to solve the word count
    problem with map-reduce.

    """

    @staticmethod
    def PingPong(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Driver/PingPong',
            mapreduce__pb2.Ping.SerializeToString,
            mapreduce__pb2.Pong.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AssignTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Driver/AssignTask',
            mapreduce__pb2.TaskRequest.SerializeToString,
            mapreduce__pb2.TaskAssignment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AcknowledgeTaskCompletion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Driver/AcknowledgeTaskCompletion',
            mapreduce__pb2.TaskCompletion.SerializeToString,
            mapreduce__pb2.TaskCompletionACK.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
